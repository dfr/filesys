#!/bin/sh

# PROVIDE: unfsd
# REQUIRE: SERVERS
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# unfsd_enable (bool):  Set to NO by default.
#                       Set it to YES to enable unfsd.
# unfsd_flags (string): Command line flags for unfsd

. /etc/rc.subr

name=unfsd
rcvar=unfsd_enable
command="/usr/local/unfsd/bin/nfsd"
start_precmd="${name}_prestart"

: ${unfsd_enable:="NO"}
: ${unfsd_role:="SIMPLE"}
: ${unfsd_ec2_storage:="NO"}
: ${unfsd_storage:="/storage"}
: ${unfsd_flags:= "--daemon --listen=$(hostname)"}
: ${unfsd_mds_addr:="udp://$(hostname):2049"}

# For paxos replication, the local address for receiving replication
# messages and a list of all the addresses for sending replication
# messages
: ${unfsd_paxos:="NO"}
: ${unfsd_paxos_addr:=""}
: ${unfsd_paxos_replicas:=""}

unfsd_prestart()
{
    local replicas
    local url

    if [ ${unfsd_ec2_storage} = "YES" ]; then
	if zpool status storage > /dev/null 2>&1; then
	    # Storage is already healthy so leave it alone
	else
	    # Fetch a list of EC2 disks
	    disks=`fetch -qo - http://169.254.169.254/latest/meta-data/block-device-mapping/ | grep -E '^ephemeral[0-9]+$'`
	    pooldevs=""
	    for disk in ${disks}; do
		dev=`fetch -qo - http://169.254.169.254/latest/meta-data/block-device-mapping/${disk}`
		case "$dev" in
		    sd[a-j])
			dev="/dev/xbd`echo ${dev} | cut -c3 | tr 'a-j' '0-9'`"
			;;
		    xvd[a-z])
			dev="/dev/xbd`echo ${dev} | cut -c4 | tr 'a-j' '0-9'`"
			;;
		    *)
			echo "Can't map ${disk} to FreeBSD device"
			continue
			;;
		esac
		if [ -c ${dev} ]; then
		    pooldevs="${pooldevs} ${dev}"
		fi
	    done
	    if [ "${pooldevs}" != "" ]; then
		zpool create storage ${pooldevs}
	    else
		mkdir -p /storage
	    fi
	fi
    fi
    if [ ${unfsd_paxos} = "YES" ]; then
	if [ -n "${unfsd_paxos_addr}" ]; then
	    replicas="addr=${unfsd_paxos_addr}"
	fi
	for replica in $(echo ${unfsd_paxos_replicas}); do
	    if [ -n "${replicas}" ]; then
		replicas="${replicas}&"
	    fi
	    replicas="${replicas}replica=${replica}"
	done
    else
	replicas=""
    fi
    case ${unfsd_role} in
	SIMPLE)
	    url="objfs://${unfsd_storage}"
	    if [ -n "${replicas}" ]; then
		url="${url}?${replicas}"
	    fi
	    ;;
	METADATA)
	    url="distfs://${unfsd_storage}?mds-addr=${unfsd_mds_addr}"
	    if [ -n "${replicas}" ]; then
		url="${url}&${replicas}"
	    fi
	    ;;
	DATA)
	    rc_flags="${rc_flags} --mds=${unfsd_mds_addr}"
	    url="datafs://${unfsd_storage}"
	    ;;
	*)
	    echo "Unrecognised server role ${unfsd_role}"
	    exit 1
	    ;;
    esac
    rc_flags="${rc_flags} '${url}'"
}

load_rc_config $name
run_rc_command "$1"
